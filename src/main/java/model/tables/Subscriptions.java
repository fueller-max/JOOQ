/*
 * This file is generated by jOOQ.
 */
package model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import model.Indexes;
import model.Keys;
import model.Skillbox;
import model.tables.records.SubscriptionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Subscriptions extends TableImpl<SubscriptionsRecord> {

    private static final long serialVersionUID = 864701600;

    /**
     * The reference instance of <code>skillbox.subscriptions</code>
     */
    public static final Subscriptions SUBSCRIPTIONS = new Subscriptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionsRecord> getRecordType() {
        return SubscriptionsRecord.class;
    }

    /**
     * The column <code>skillbox.subscriptions.student_id</code>.
     */
    public final TableField<SubscriptionsRecord, UInteger> STUDENT_ID = createField(DSL.name("student_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>skillbox.subscriptions.course_id</code>.
     */
    public final TableField<SubscriptionsRecord, UInteger> COURSE_ID = createField(DSL.name("course_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>skillbox.subscriptions.subscription_date</code>.
     */
    public final TableField<SubscriptionsRecord, LocalDateTime> SUBSCRIPTION_DATE = createField(DSL.name("subscription_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>skillbox.subscriptions</code> table reference
     */
    public Subscriptions() {
        this(DSL.name("subscriptions"), null);
    }

    /**
     * Create an aliased <code>skillbox.subscriptions</code> table reference
     */
    public Subscriptions(String alias) {
        this(DSL.name(alias), SUBSCRIPTIONS);
    }

    /**
     * Create an aliased <code>skillbox.subscriptions</code> table reference
     */
    public Subscriptions(Name alias) {
        this(alias, SUBSCRIPTIONS);
    }

    private Subscriptions(Name alias, Table<SubscriptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Subscriptions(Name alias, Table<SubscriptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Subscriptions(Table<O> child, ForeignKey<O, SubscriptionsRecord> key) {
        super(child, key, SUBSCRIPTIONS);
    }

    @Override
    public Schema getSchema() {
        return Skillbox.SKILLBOX;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SUBSCRIPTIONS_COURSE_IDX);
    }

    @Override
    public List<UniqueKey<SubscriptionsRecord>> getKeys() {
        return Arrays.<UniqueKey<SubscriptionsRecord>>asList(Keys.KEY_SUBSCRIPTIONS_UNQ);
    }

    @Override
    public List<ForeignKey<SubscriptionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SubscriptionsRecord, ?>>asList(Keys.STUDENT, Keys.COURSE);
    }

    public Students students() {
        return new Students(this, Keys.STUDENT);
    }

    public Courses courses() {
        return new Courses(this, Keys.COURSE);
    }

    @Override
    public Subscriptions as(String alias) {
        return new Subscriptions(DSL.name(alias), this);
    }

    @Override
    public Subscriptions as(Name alias) {
        return new Subscriptions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscriptions rename(String name) {
        return new Subscriptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscriptions rename(Name name) {
        return new Subscriptions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UInteger, UInteger, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
