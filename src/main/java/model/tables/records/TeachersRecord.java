/*
 * This file is generated by jOOQ.
 */
package model.tables.records;


import model.tables.Teachers;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeachersRecord extends UpdatableRecordImpl<TeachersRecord> implements Record4<UInteger, String, UInteger, UInteger> {

    private static final long serialVersionUID = -1747826224;

    /**
     * Setter for <code>skillbox.teachers.id</code>.
     */
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>skillbox.teachers.id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>skillbox.teachers.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>skillbox.teachers.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>skillbox.teachers.salary</code>.
     */
    public void setSalary(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>skillbox.teachers.salary</code>.
     */
    public UInteger getSalary() {
        return (UInteger) get(2);
    }

    /**
     * Setter for <code>skillbox.teachers.age</code>.
     */
    public void setAge(UInteger value) {
        set(3, value);
    }

    /**
     * Getter for <code>skillbox.teachers.age</code>.
     */
    public UInteger getAge() {
        return (UInteger) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UInteger, String, UInteger, UInteger> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UInteger, String, UInteger, UInteger> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return Teachers.TEACHERS.ID;
    }

    @Override
    public Field<String> field2() {
        return Teachers.TEACHERS.NAME;
    }

    @Override
    public Field<UInteger> field3() {
        return Teachers.TEACHERS.SALARY;
    }

    @Override
    public Field<UInteger> field4() {
        return Teachers.TEACHERS.AGE;
    }

    @Override
    public UInteger component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public UInteger component3() {
        return getSalary();
    }

    @Override
    public UInteger component4() {
        return getAge();
    }

    @Override
    public UInteger value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public UInteger value3() {
        return getSalary();
    }

    @Override
    public UInteger value4() {
        return getAge();
    }

    @Override
    public TeachersRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    @Override
    public TeachersRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public TeachersRecord value3(UInteger value) {
        setSalary(value);
        return this;
    }

    @Override
    public TeachersRecord value4(UInteger value) {
        setAge(value);
        return this;
    }

    @Override
    public TeachersRecord values(UInteger value1, String value2, UInteger value3, UInteger value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TeachersRecord
     */
    public TeachersRecord() {
        super(Teachers.TEACHERS);
    }

    /**
     * Create a detached, initialised TeachersRecord
     */
    public TeachersRecord(UInteger id, String name, UInteger salary, UInteger age) {
        super(Teachers.TEACHERS);

        set(0, id);
        set(1, name);
        set(2, salary);
        set(3, age);
    }
}
