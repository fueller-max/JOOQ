/*
 * This file is generated by jOOQ.
 */
package model.tables;


import java.util.Arrays;
import java.util.List;

import model.Indexes;
import model.Keys;
import model.Skillbox;
import model.enums.CoursesType;
import model.tables.records.CoursesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Courses extends TableImpl<CoursesRecord> {

    private static final long serialVersionUID = 829122674;

    /**
     * The reference instance of <code>skillbox.courses</code>
     */
    public static final Courses COURSES = new Courses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoursesRecord> getRecordType() {
        return CoursesRecord.class;
    }

    /**
     * The column <code>skillbox.courses.id</code>.
     */
    public final TableField<CoursesRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>skillbox.courses.name</code>.
     */
    public final TableField<CoursesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>skillbox.courses.duration</code>.
     */
    public final TableField<CoursesRecord, UInteger> DURATION = createField(DSL.name("duration"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "   ");

    /**
     * The column <code>skillbox.courses.type</code>.  :  /  /  / 
     */
    public final TableField<CoursesRecord, CoursesType> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(model.enums.CoursesType.class), this, " :  /  /  / ");

    /**
     * The column <code>skillbox.courses.description</code>.
     */
    public final TableField<CoursesRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>skillbox.courses.teacher_id</code>.   ,   
     */
    public final TableField<CoursesRecord, UInteger> TEACHER_ID = createField(DSL.name("teacher_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "  ,   ");

    /**
     * The column <code>skillbox.courses.students_count</code>.
     */
    public final TableField<CoursesRecord, UInteger> STUDENTS_COUNT = createField(DSL.name("students_count"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "   ");

    /**
     * The column <code>skillbox.courses.price</code>.
     */
    public final TableField<CoursesRecord, UInteger> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "   ");

    /**
     * The column <code>skillbox.courses.price_per_hour</code>.
     */
    public final TableField<CoursesRecord, Double> PRICE_PER_HOUR = createField(DSL.name("price_per_hour"), org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * Create a <code>skillbox.courses</code> table reference
     */
    public Courses() {
        this(DSL.name("courses"), null);
    }

    /**
     * Create an aliased <code>skillbox.courses</code> table reference
     */
    public Courses(String alias) {
        this(DSL.name(alias), COURSES);
    }

    /**
     * Create an aliased <code>skillbox.courses</code> table reference
     */
    public Courses(Name alias) {
        this(alias, COURSES);
    }

    private Courses(Name alias, Table<CoursesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Courses(Name alias, Table<CoursesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Courses(Table<O> child, ForeignKey<O, CoursesRecord> key) {
        super(child, key, COURSES);
    }

    @Override
    public Schema getSchema() {
        return Skillbox.SKILLBOX;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COURSES_TEACHER_IDX);
    }

    @Override
    public Identity<CoursesRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_COURSES;
    }

    @Override
    public UniqueKey<CoursesRecord> getPrimaryKey() {
        return Keys.KEY_COURSES_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoursesRecord>> getKeys() {
        return Arrays.<UniqueKey<CoursesRecord>>asList(Keys.KEY_COURSES_PRIMARY);
    }

    @Override
    public List<ForeignKey<CoursesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CoursesRecord, ?>>asList(Keys.TEACHER);
    }

    public Teachers teachers() {
        return new Teachers(this, Keys.TEACHER);
    }

    @Override
    public Courses as(String alias) {
        return new Courses(DSL.name(alias), this);
    }

    @Override
    public Courses as(Name alias) {
        return new Courses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Courses rename(String name) {
        return new Courses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Courses rename(Name name) {
        return new Courses(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UInteger, String, UInteger, CoursesType, String, UInteger, UInteger, UInteger, Double> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
