/*
 * This file is generated by jOOQ.
 */
package model.tables;


import java.util.Arrays;
import java.util.List;

import model.Keys;
import model.Skillbox;
import model.tables.records.TeachersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teachers extends TableImpl<TeachersRecord> {

    private static final long serialVersionUID = -1011011008;

    /**
     * The reference instance of <code>skillbox.teachers</code>
     */
    public static final Teachers TEACHERS = new Teachers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeachersRecord> getRecordType() {
        return TeachersRecord.class;
    }

    /**
     * The column <code>skillbox.teachers.id</code>.
     */
    public final TableField<TeachersRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>skillbox.teachers.name</code>.
     */
    public final TableField<TeachersRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "  \n");

    /**
     * The column <code>skillbox.teachers.salary</code>.
     */
    public final TableField<TeachersRecord, UInteger> SALARY = createField(DSL.name("salary"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "  ");

    /**
     * The column <code>skillbox.teachers.age</code>.
     */
    public final TableField<TeachersRecord, UInteger> AGE = createField(DSL.name("age"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, " ");

    /**
     * Create a <code>skillbox.teachers</code> table reference
     */
    public Teachers() {
        this(DSL.name("teachers"), null);
    }

    /**
     * Create an aliased <code>skillbox.teachers</code> table reference
     */
    public Teachers(String alias) {
        this(DSL.name(alias), TEACHERS);
    }

    /**
     * Create an aliased <code>skillbox.teachers</code> table reference
     */
    public Teachers(Name alias) {
        this(alias, TEACHERS);
    }

    private Teachers(Name alias, Table<TeachersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teachers(Name alias, Table<TeachersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Teachers(Table<O> child, ForeignKey<O, TeachersRecord> key) {
        super(child, key, TEACHERS);
    }

    @Override
    public Schema getSchema() {
        return Skillbox.SKILLBOX;
    }

    @Override
    public Identity<TeachersRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_TEACHERS;
    }

    @Override
    public UniqueKey<TeachersRecord> getPrimaryKey() {
        return Keys.KEY_TEACHERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TeachersRecord>> getKeys() {
        return Arrays.<UniqueKey<TeachersRecord>>asList(Keys.KEY_TEACHERS_PRIMARY);
    }

    @Override
    public Teachers as(String alias) {
        return new Teachers(DSL.name(alias), this);
    }

    @Override
    public Teachers as(Name alias) {
        return new Teachers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teachers rename(String name) {
        return new Teachers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teachers rename(Name name) {
        return new Teachers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UInteger, String, UInteger, UInteger> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
